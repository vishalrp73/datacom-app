name: Unit Testing, SonarCloud Analysis & Docker Hub Image Push

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ap-southeast-2
  ECR_REPOSITORY: datacom-app
  ECS_SERVICE: datacom-container-service
  ECS_CLUSTER: datacom-cluster
  ECS_TASK_DEFINITION: datacom_definition.json
  CONTAINER_NAME: datacom-container

jobs:
  buildAndTest:
    name: Unit Testing in Jest
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '14.x'
      - name: Install dependencies
        run: npm install
      - run: npm run build -- if-present
      - run: npm test
  
  
  sonarCloudTrigger:
      needs: buildAndTest
      name: SonarCloud Trigger
      runs-on: ubuntu-latest
      steps:
        - name: Clone Repo
          uses: actions/checkout@v2
        - name: Analyse with SonarCloud
          uses: sonarsource/sonarcloud-github-action@v1.3
          env:
            GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  
  
  dockerBuild:
      needs: sonarCloudTrigger
      runs-on: ubuntu-latest
      
      steps:
      
        - name: Check Out Repo 
          uses: actions/checkout@v2

        - name: Login to Docker Hub
          uses: docker/login-action@v1
          with:
            username: ${{ secrets.DOCKER_HUB_USERNAME }}
            password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

        - name: Set up Docker Buildx
          id: buildx
          uses: docker/setup-buildx-action@v1

        - name: Build and push
          id: docker_build
          uses: docker/build-push-action@v2
          with:
            context: ./
            file: ./Dockerfile
            push: true
            tags: ${{ secrets.DOCKER_HUB_USERNAME }}/dc_app:latest

        - name: Image digest
          run: echo ${{ steps.docker_build.outputs.digest }}

  deploy:
    needs: dockerBuild
    name: Deploy to ECS
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true